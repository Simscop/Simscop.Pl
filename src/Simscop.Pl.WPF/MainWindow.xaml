<liftui:Window
    x:Class="Simscop.Pl.WPF.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:Simscop.Pl.WPF.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:imageEx="clr-namespace:Simscop.Pl.Ui.ImageEx;assembly=Simscop.Pl.Ui"
    xmlns:liftui="https://github.com/pchuan98/Lift.UI"
    xmlns:local="clr-namespace:Simscop.Pl.WPF"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System;assembly=System.Runtime"
    xmlns:ui="clr-namespace:Simscop.Pl.Ui;assembly=Simscop.Pl.Ui"
    xmlns:vm="clr-namespace:Simscop.Pl.WPF.ViewModels"
    Width="1750"
    Height="1000"
    d:DataContext="{d:DesignInstance vm:MainViewModel}"
    Topmost="False"
    mc:Ignorable="d">

    <liftui:Window.NonClientAreaContent>
        <StackPanel Orientation="Horizontal">
            <TextBlock
                VerticalAlignment="Center"
                FontSize="15"
                FontWeight="Bold"
                Text="Simscop.Pl" />
            <Menu Margin="20,0,0,0" VerticalAlignment="Center">
                <MenuItem
                    VerticalAlignment="Center"
                    Click="OnCameraSettingViewClicked"
                    Header="相机设置" />
                <MenuItem
                    VerticalAlignment="Center"
                    Click="OnLineChartSettingViewClicked"
                    Header="图表设置" />
                <MenuItem Click="SaveMenuClicked" Header="导出" />
            </Menu>
        </StackPanel>
    </liftui:Window.NonClientAreaContent>

    <liftui:Window.Resources>
        <sys:Boolean x:Key="TrueValue">True</sys:Boolean>
        <sys:Boolean x:Key="FalseValue">False</sys:Boolean>
    </liftui:Window.Resources>

    <DockPanel>
        <ToolBarTray DockPanel.Dock="Top">
            <ToolBar
                x:Name="VisibleBar"
                Margin="10,0"
                Padding="10"
                Header="Visible"
                OverflowMode="Never">
                <CheckBox
                    Margin="10,0"
                    Content="Camera"
                    IsChecked="{Binding Visibility, ElementName=ImageViewer, Mode=TwoWay, Converter={converters:BoolVisibleConverter}}" />
                <CheckBox
                    Margin="10,0"
                    Content="LineChart"
                    IsChecked="{Binding Visibility, ElementName=Line, Mode=TwoWay, Converter={converters:BoolVisibleConverter}}" />
                <CheckBox
                    Margin="10,0"
                    Content="GridChart"
                    IsChecked="{Binding Visibility, ElementName=Heatmap, Mode=TwoWay, Converter={converters:BoolVisibleConverter}}" />
            </ToolBar>
            <ToolBar
                x:Name="MotorBar"
                Margin="10,0"
                Padding="10"
                d:DataContext="{d:DesignInstance vm:MotorViewModel}"
                Header="Motor"
                OverflowMode="Never">
                <UniformGrid Columns="3">
                    <TextBox
                        Width="150"
                        Margin="0,0,5,0"
                        VerticalAlignment="Center"
                        liftui:InfoElement.Title="X(um)"
                        liftui:InfoElement.TitlePlacement="Left"
                        IsReadOnly="True"
                        Style="{DynamicResource TextBoxExtend}"
                        Text="{Binding X, StringFormat={}{0:F2}}" />
                    <TextBox
                        Margin="0,0,5,0"
                        VerticalAlignment="Center"
                        liftui:InfoElement.Title="Y(um)"
                        liftui:InfoElement.TitlePlacement="Left"
                        IsReadOnly="True"
                        Style="{DynamicResource TextBoxExtend}"
                        Text="{Binding Y, StringFormat={}{0:F2}}" />
                    <TextBox
                        Margin="0,0,5,0"
                        VerticalAlignment="Center"
                        liftui:InfoElement.Title="Z(um)"
                        liftui:InfoElement.TitlePlacement="Left"
                        IsReadOnly="True"
                        Style="{DynamicResource TextBoxExtend}"
                        Text="{Binding Z, StringFormat={}{0:F2}}" />
                </UniformGrid>
            </ToolBar>
            <ToolBar
                x:Name="MotorSettingBar"
                Margin="10,0"
                Padding="10"
                d:DataContext="{d:DesignInstance vm:MotorViewModel}"
                OverflowMode="Never">
                <liftui:ButtonGroup Margin="0,0,10,0" Style="{DynamicResource ButtonGroupSolid}">
                    <RadioButton Content="X" IsChecked="{Binding Axis, Converter={converters:EnumBoolConverter}, ConverterParameter={x:Static vm:MotorAxis.X}}" />
                    <RadioButton Content="Y" IsChecked="{Binding Axis, Converter={converters:EnumBoolConverter}, ConverterParameter={x:Static vm:MotorAxis.Y}}" />
                    <RadioButton Content="Z" IsChecked="{Binding Axis, Converter={converters:EnumBoolConverter}, ConverterParameter={x:Static vm:MotorAxis.Z}}" />
                </liftui:ButtonGroup>
                <Grid>
                    <liftui:NumericUpDown
                        Width="100"
                        Visibility="{Binding Axis, Converter={converters:EnumVisibleConverter}, ConverterParameter={x:Static vm:MotorAxis.X}}"
                        Value="{Binding IntervalX}" />
                    <liftui:NumericUpDown
                        Width="100"
                        Visibility="{Binding Axis, Converter={converters:EnumVisibleConverter}, ConverterParameter={x:Static vm:MotorAxis.Y}}"
                        Value="{Binding IntervalY}" />
                    <liftui:NumericUpDown
                        Width="100"
                        Visibility="{Binding Axis, Converter={converters:EnumVisibleConverter}, ConverterParameter={x:Static vm:MotorAxis.Z}}"
                        Value="{Binding IntervalZ}" />
                </Grid>
                <Grid Margin="5,0,0,0">
                    <Button
                        Command="{Binding AsyncMoveXCommand}"
                        CommandParameter="{StaticResource TrueValue}"
                        Content="🔼"
                        Visibility="{Binding Axis, Converter={converters:EnumVisibleConverter}, ConverterParameter={x:Static vm:MotorAxis.X}}" />
                    <Button
                        Command="{Binding AsyncMoveYCommand}"
                        CommandParameter="{StaticResource TrueValue}"
                        Content="🔼"
                        Visibility="{Binding Axis, Converter={converters:EnumVisibleConverter}, ConverterParameter={x:Static vm:MotorAxis.Y}}" />
                    <Button
                        Command="{Binding AsyncMoveZCommand}"
                        CommandParameter="{StaticResource TrueValue}"
                        Content="🔼"
                        Visibility="{Binding Axis, Converter={converters:EnumVisibleConverter}, ConverterParameter={x:Static vm:MotorAxis.Z}}" />
                </Grid>
                <Grid Margin="1,0">
                    <Button
                        Command="{Binding AsyncMoveXCommand}"
                        CommandParameter="{StaticResource FalseValue}"
                        Content="🔽"
                        Visibility="{Binding Axis, Converter={converters:EnumVisibleConverter}, ConverterParameter={x:Static vm:MotorAxis.X}}" />
                    <Button
                        Command="{Binding AsyncMoveYCommand}"
                        CommandParameter="{StaticResource FalseValue}"
                        Content="🔽"
                        Visibility="{Binding Axis, Converter={converters:EnumVisibleConverter}, ConverterParameter={x:Static vm:MotorAxis.Y}}" />
                    <Button
                        Command="{Binding AsyncMoveZCommand}"
                        CommandParameter="{StaticResource FalseValue}"
                        Content="🔽"
                        Visibility="{Binding Axis, Converter={converters:EnumVisibleConverter}, ConverterParameter={x:Static vm:MotorAxis.Z}}" />
                </Grid>
            </ToolBar>

            <ToolBar
                x:Name="SpectrometerSettingBar"
                Margin="10,0"
                Padding="10"
                d:DataContext="{d:DesignInstance vm:MainViewModel}"
                OverflowMode="Never">
                <TextBlock VerticalAlignment="Center" Text="Live" />
                <ToggleButton
                    Margin="10,0"
                    Background="DarkGray"
                    IsChecked="{Binding IsLive}"
                    Style="{DynamicResource ToggleButtonSwitch}" />
                <liftui:NumericUpDown
                    Width="150"
                    Margin="10,0"
                    Maximum="{Binding MaxIntegrationTime}"
                    Minimum="{Binding MinIntegrationTime}"
                    Value="{Binding IntegrationTime}" />
                <Button Command="{Binding SetIntegrationTimeCommand}" Content="积分时间(us)" />
            </ToolBar>
        </ToolBarTray>
        <StatusBar Height="32" DockPanel.Dock="Bottom" />

        <Border
            Margin="5"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="1"
            CornerRadius="5">

            <Grid x:Name="Main" Margin="5">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <Border
                    Grid.Column="0"
                    BorderBrush="{DynamicResource BorderBrush}"
                    BorderThickness="1"
                    CornerRadius="10">
                    <imageEx:ImageEx
                        x:Name="ImageViewer"
                        Margin="5"
                        HorizontalAlignment="Stretch"
                        DockPanel.Dock="Left">
                        <imageEx:ImageEx.MarkerMenu>
                            <ContextMenu>
                                <MenuItem Command="{Binding AcquireRamanDataCommand}" Header="Acquire" />
                                <MenuItem
                                    Command="imageEx:ImageEx.MarkerCommand"
                                    CommandParameter="{x:Static imageEx:ImageEx.ZoomScale}"
                                    Header="Scale" />
                                <MenuItem
                                    Command="imageEx:ImageEx.MarkerCommand"
                                    CommandParameter="{x:Static imageEx:ImageEx.Delete}"
                                    Header="Delete" />
                            </ContextMenu>
                        </imageEx:ImageEx.MarkerMenu>
                    </imageEx:ImageEx>
                </Border>

                <UniformGrid
                    x:Name="Chart"
                    Grid.Column="1"
                    DockPanel.Dock="Right"
                    Rows="2">
                    <ui:HeatmapChart
                        x:Name="Heatmap"
                        Margin="20,0,0,0"
                        HorizontalAlignment="Stretch"
                        d:DataContext="{d:DesignInstance vm:HeatmapViewModel}"
                        Cols="{Binding Cols}"
                        Data="{Binding Array}"
                        Palette="Cool"
                        Rows="{Binding Rows}"
                        SelectedIndex="{Binding Selected, Mode=OneWayToSource}" />
                    <ui:LineChart
                        x:Name="Line"
                        Margin="0,5,40,0"
                        d:DataContext="{d:DesignInstance vm:LineChartViewModel}"
                        Annotation="{Binding Annotation}"
                        Panel="{Binding Panel}"
                        XAxisModel="{Binding AxisX}"
                        YAxisModel="{Binding AxisY}" />
                </UniformGrid>
            </Grid>
        </Border>
    </DockPanel>


</liftui:Window>
